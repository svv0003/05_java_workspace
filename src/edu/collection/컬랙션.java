package edu.collection;

/*
클래스, 추상 클래스의 상속 키워드는 extends (문서를 확장하다.)
                                    필드, 생성자 기준의 문서
인터페이스 상속 키워드는 implements (문서에 존재하는 기능을 구현하다.)
                         메서드 (기능) 기준의 문서
                         필드를 작성할 수 있으나 public static final으로만 설정되어서
                         상수형 필드만 작성 가능하다.
                         기능 또한 void/자료형 메서드명();로 작성해도
                         public abstract로만 설정되고, 중괄호 {}를 작성할 수 없다.


컬랙션            : 인터페이스 - 클래스 형태
                    여러 데이터를 한꺼번에 저장하고 관리하기 위한 데이터 구조를 말한다.
                    배열처럼 데이터를 묶어서 다루지만,
                    배열과 달리 크기가 동적으로 변할 수 있고, 다양한 기능을 제공한다.
                    ex) ArrayList, HashSet, HashMap

컬랙션과 배열의 차이점?
배열은 크기가 고정이고, 단순한 데이터 저장하는 용도로 쓰이지만                 int[] arr = new int[5]
컬랙션은 크기가 동적이고, 데이터 추가/삭제/검색 등 다양한 메서드 제공한다.     ArrayList<Integer> list = new ArrayList<>();


컬랙션 프레임워크  : Java 개발자들이 Java 사용자들을 위해 자료 구조를 만들어서 모아둔 것
                     데이터를 저장하고 조작하는 표준화된 방법을 제공하는 핵심 라이브러리

                     컬렉션(데이터 구조)을 효율적으로 사용하기 위해 제공하는 클래스와 인터페이스의 집합입니다.
                     Java가 미리 만들어 놓은 도구 상자라고 생각하면 됩니다.
                     이 도구 상자는 데이터를 저장, 관리, 처리하는 표준화된 방법을 제공해요.

개발자들이 편리하게 사용할 수 있도록 기능별로 분리해놓은 코드 모음 문서이다. (코드의 도서관 역할)
프레임워크    : 프레임워크가 개발자 코드를 제어한다.
                특정 기능을 만들기 위해서 구조와 틀이 정해져 있고, 정해진 구조와 틀 안에서 개발한다.
                코드계의 밀키트
                ex) Spring, React, Express (Java가 아닌 JS로 백엔드를 개발하는 서버 관리)

라이브러리    : 개발자가 필요할 때 호출한다.
                특정 기능을 만들기 위해서 정해진 틀 없이 주어지는 기능들을 개발자가 원하는대로 개발한다.
                코드계의 뷔페
                ex) jQuery

프레임워크는 기능이 나를 호출하고,
라이브러리는 내가 기능을 호출한다.

특징
1) 크기 제한 없다.
    부족하면 자동으로 증가하고, 자동으로 개수 감소한다.
2) 별도로 설치할 필요 없이 java.util 폴더 내에 모두 존재한다.
3) 추가, 수정, 삭제, 검색 등 다양한 기능이 구현되어 있다.
4) 객체만 저장 가능하다.
    기본 자료형 (char, boolean, byte, int, short, long, float, double)를
                 Character, Boolean, Byte, Integer, Short, Long, Float, Double와
                 같은 형태로 만들어 사용하기도 한다.


컬랙션의 대표적인 프레임워크 -  List 인터페이스가 존재한다.
                                List를 기반드로 만들어진 ArrayList 객체를 주로 활용하고, 매우 중요하다.
 */

public class 컬랙션 {
}
